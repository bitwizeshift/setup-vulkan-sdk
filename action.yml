name: 'Setup Vulkan SDK'
description: 'Configures Vulkan SDK and sets VULKAN_SDK environment variable.'
branding:
  icon: 'play'  
  color: 'red'  
inputs:
  vulkan-config-file:
    description: 'Vulkan SDK configuration path (prefer this to relying on vulkan-remote-version lookup)'
    default: ''
    required: true
  vulkan-remote-version:
    description: 'Vulkan SDK release version (download configuration file from LunarG web services)'
    default: ''
    required: false
  vulkan-components:
    description: 'specify which Vulkan SDK components to install, e.g. Vulkan-Headers, Vulkan-Loader, Glslang'
    default: Vulkan-Headers, Vulkan-Loader
    required: true
  vulkan-use-cache:
    description: 'specify whether to cache VULKAN_SDK/ results between runs (using github actions/cache)'
    default: false
    required: false
runs:
  using: "composite"
  steps: 
    - name: Resolve Vulkan SDK Configuration
      shell: bash
      run: |
        . $GITHUB_ACTION_PATH/action_helpers.sh
        resolve_vulkan_sdk_environment \
          "${{ inputs.vulkan-remote-url }}" \
          "${{ inputs.vulkan-remote-version }}" \
          "${{ inputs.vulkan-config-file }}" \
          "${{ inputs.vulkan-components }}"

    - name: Configure Development Environment Prerequisites
      shell: bash
      run: |
        case `uname -s` in
          Darwin) ;;
          Linux) 
            sudo apt-get -qq update 
            sudo apt-get -qq install -y libwayland-dev libxrandr-dev
          ;;
          MINGW*) ;;
        esac

    - name: Check Vulkan SDK Cache
      if: inputs.vulkan-use-cache != 'false'
      id: vulkan-cached-sdk
      uses: actions/cache@v2
      with:
        path: VULKAN_SDK
        key: ${{ runner.os }}-vulkan-cached-sdk-${{ hashFiles(env.VULKAN_SDK_CONFIG_FILE) }}-${{ inputs.vulkan-components }}

    - name: Configure Vulkan SDK Build Prerequisites
      if: steps.vulkan-cached-sdk.outputs.cache-hit != 'true'
      shell: bash
      run: |
        . $GITHUB_ACTION_PATH/action_helpers.sh
        . $PWD/_vulkan_build/env
        configure_sdk_prereqs $PWD/_vulkan_build/tools
        echo PATH=$PWD/_vulkan_build/tools/bin:\$PATH >> $PWD/_vulkan_build/env
        echo "$VULKAN_SDK_BUILD_DIR/env:"
        echo "--------------------------------------------------------------"
        cat $VULKAN_SDK_BUILD_DIR/env
        echo "--------------------------------------------------------------"

    - name: Configure Vulkan SDK Components
      if: steps.vulkan-cached-sdk.outputs.cache-hit != 'true'
      shell: bash
      run: |
        . $PWD/_vulkan_build/env
        cmake -G Ninja -S $GITHUB_ACTION_PATH -B ${VULKAN_SDK_BUILD_DIR} -DCMAKE_BUILD_TYPE=Release \
          -DVULKAN_SDK=${VULKAN_SDK} \
          -DVULKAN_SDK_CONFIG="${VULKAN_SDK_CONFIG_FILE}" \
          -DVULKAN_SDK_COMPONENTS="${VULKAN_SDK_COMPONENTS}"

    - name: Build Vulkan SDK Components
      if: steps.vulkan-cached-sdk.outputs.cache-hit != 'true'
      shell: bash
      run: |
        . $PWD/_vulkan_build/env
        cmake --build ${VULKAN_SDK_BUILD_DIR} --config Release

    - name: Install Vulkan SDK Components
      if: steps.vulkan-cached-sdk.outputs.cache-hit != 'true'
      shell: bash
      run: |
        . $PWD/_vulkan_build/env
        cmake --install ${VULKAN_SDK_BUILD_DIR}

    - name: Verify Vulkan SDK Installation
      shell: bash
      run: |
        . $PWD/_vulkan_build/env
        test -s ${VULKAN_SDK}/sdk.env
        . ${VULKAN_SDK}/sdk.env
        if [[ -d "${VULKAN_SDK}" && -n "${VULKAN_SDK_VERSION}" ]] ; then
          echo "Vulkan SDK v${VULKAN_SDK_VERSION} successfully installed into ${VULKAN_SDK}."
          du -hs ${VULKAN_SDK}
        else
          echo "Could not verify Vulkan SDK installation"
          exit 3
        fi

    - name: Export VULKAN_SDK to GITHUB_ENV
      shell: bash
      run: |
        . $PWD/_vulkan_build/env
        . ${VULKAN_SDK}/sdk.env
        (
          echo VULKAN_SDK=${VULKAN_SDK}
          echo VULKAN_SDK_VERSION=${VULKAN_SDK_VERSION}
        ) | tee -a $GITHUB_ENV
        echo ${VULKAN_SDK}/bin | tee -a $GITHUB_PATH
